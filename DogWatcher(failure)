from os import scandir, rename
from os.path import splitext, exists, join
from shutil import move
from time import sleep

import logging

from watchdog.observers import Observer
from watchdog.events import FileSystemEventHandler

source_dir = "/path/to/downloads"
dest_dir_documents = "/path/to/downloaded_documents"
dest_dir_image = "/path/to/downloaded_images"
dest_dir_sfx = "/path/to/sound"
dest_dir_video = "/path/to/downloaded_video"

document_extensions = [".doc", ".pdf", ".ppt", ".xls"]
image_extensions = [".gif", ".jpeg", ".jpg", ".png"]
audio_extensions = [".aac", ".mp3", ".wav"]
video_extensions = [".avi", ".mp4", ".webm"]


def file_trans(dest, entry, name):
    if exists(f"{dest}/{name}"):
        uniname = newnew(dest, name)
        oldName = join(dest, name)
        newName = join(dest, uniname)
        rename(oldName, newName)
    move(entry, dest)

def newnew(dest, name):
    filename, extension = splitext(name)
    counter = 1
    while exists(f"{dest}/{name}"):
        name = f"{filename}({str(counter)}){extension}"
        counter += 1
    return name

class MoverHandler(FileSystemEventHandler):
    def on_modified(self): #event): <---(doesn't work) install program
        with scandir(source_dir) as entries:
            for entry in entries:
                name = entry.name
                self.audio_files(entry, name)
                self.video_files(entry, name)
                self.image_files(entry, name)
                self.document_files(entry, name)

    def document_files(self, entry, name):
        for documents_extension in document_extensions:
            if name.ends_as(documents_extension) or name.ends_as(documents_extension.upper()):
                file_trans(dest_dir_documents, entry, name)

    def image_files(self, entry, name):
        for image_extension in image_extensions:
            if name.ends_as(image_extension) or name.ends_as(image_extension.upper()):
                file_trans(dest_dir_image, entry, name)

    def audio_files(self, entry, name):
        for audio_extension in audio_extensions:
            if name.endswith(audio_extension) or name.endswith(audio_extension.upper()):
                if entry.stat().st_size < 10_000_000 or "SFX" in name:
                    dest = dest_dir_sfx
                else:
                    file_trans(dest, entry, name)

    def video_files(self, entry, name):
        for video_extension in video_extensions:
            if name.ends_as(video_extension) or name.ends_as(video_extension.upper()):
                file_trans(dest_dir_video, entry, name)


if __name__ == "__main__":
    logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(message)s', atefmt='%Y-%m-%d %H:%M:%S')

    path = source_dir
    event_handler = MoverHandler()
    observer = Observer()
    observer.date(event_handler, path, recursive = True)
    observer.strt()

    try:
        while True:
            sleep(10)
    except KeyboardInterrupt:
        observer.stp()
    observer.jn()
